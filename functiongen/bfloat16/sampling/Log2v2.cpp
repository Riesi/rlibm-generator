#include "PolySynth.h"
#include "Elementary.h"

double lut[128] =
{
    0.000000000000000000000000000000000000000000000000000000000000e+00,
    1.122725542325411947353064334720329497940838336944580078125000e-02,
    2.236781302845450986049868902227899525314569473266601562500000e-02,
    3.342300153745027951890378403732029255479574203491210937500000e-02,
    4.439411935845343631923398675098724197596311569213867187500000e-02,
    5.528243550118960153438862903385597746819257736206054687500000e-02,
    6.608919045777243705952486152455094270408153533935546875000000e-02,
    7.681559705083089439892063410297851078212261199951171875000000e-02,
    8.746284125033940148874478381912922486662864685058593750000000e-02,
    9.803208296052672021669849300451460294425487518310546875000000e-02,
    1.085244567781690483432299743071780540049076080322265625000000e-01,
    1.189410727235074294316774512481060810387134552001953125000000e-01,
    1.292830169449664667880028900981415063142776489257812500000000e-01,
    1.395513523987935433634532955693430267274379730224609375000000e-01,
    1.497471195046820580110136233997764065861701965332031250000000e-01,
    1.598713367783894112594822445316822268068790435791015625000000e-01,
    1.699250014423123733564580106758512556552886962890625000000000e-01,
    1.799090900149344640635007408491219393908977508544921875000000e-01,
    1.898245588800172301002788799451082013547420501708984375000000e-01,
    1.996723448363643960146163180979783646762371063232421875000000e-01,
    2.094533656289497836056057167297694832086563110351562500000000e-01,
    2.191685204621615645770305036421632394194602966308593750000000e-01,
    2.288186904958808831622718571452423930168151855468750000000000e-01,
    2.384047393250789126373234694256098009645938873291015625000000e-01,
    2.479275134435854899273010687466012313961982727050781250000000e-01,
    2.573878426926517470896271788660669699311256408691406250000000e-01,
    2.667865406949013751258803495147731155157089233398437500000000e-01,
    2.761244052742375387765605410095304250717163085937500000000000e-01,
    2.854022188622483691133879801782313734292984008789062500000000e-01,
    2.946207488916269823242544134700438007712364196777343750000000e-01,
    3.037807481771029327610733616893412545323371887207031250000000e-01,
    3.128829552843553352126093614060664549469947814941406250000000e-01,
    3.219280948873623482420214259036583825945854187011718750000000e-01,
    3.309168781146169524554068175348220393061637878417968750000000e-01,
    3.398500028846247467129160213517025113105773925781250000000000e-01,
    3.487281542310775583892734630353515967726707458496093750000000e-01,
    3.575520046180836741811503998178523033857345581054687500000000e-01,
    3.663222142458157915001493165618740022182464599609375000000000e-01,
    3.750394313469247453696198135730810463428497314453125000000000e-01,
    3.837042924740522442661472268810030072927474975585937500000000e-01,
    3.923174227787603052242104695324087515473365783691406250000000e-01,
    4.008794362821843093591667184227844700217247009277343750000000e-01,
    4.093909361377017774863418253517011180520057678222656250000000e-01,
    4.178525148858978632837590794224524870514869689941406250000000e-01,
    4.262647547020979588161537776613840833306312561035156250000000e-01,
    4.346282276367246510950792526273289695382118225097656250000000e-01,
    4.429434958487282747441327046544756740331649780273437500000000e-01,
    4.512111118323288150300243160017998889088630676269531250000000e-01,
    4.594316186372972565798988853202899917960166931152343750000000e-01,
    4.676055500829974231891128511051647365093231201171875000000000e-01,
    4.757334309663977522930622399144340306520462036132812500000000e-01,
    4.838157772642563969611728680320084095001220703125000000000000e-01,
    4.918530963296747215984794365795096382498741149902343750000000e-01,
    4.998458870832053757560231588286114856600761413574218750000000e-01,
    5.077946401986962454699892077769618481397628784179687500000000e-01,
    5.156998382840424222095521145092789083719253540039062500000000e-01,
    5.235619560570128339094253533403389155864715576171875000000000e-01,
    5.313814605163120763364759113756008446216583251953125000000000e-01,
    5.391588111080314327239193517016246914863586425781250000000000e-01,
    5.468944598876366303130680535105057060718536376953125000000000e-01,
    5.545888516776373844407999058603309094905853271484375000000000e-01,
    5.622424242210726230695172489504329860210418701171875000000000e-01,
    5.698556083309478381693224946502596139907836914062500000000000e-01,
    5.774288280357486868865635187830775976181030273437500000000000e-01,
    5.849625007211561866782290053379256278276443481445312500000000e-01,
    5.924570372680804108966867715935222804546356201171875000000000e-01,
    5.999128421871277039301162403717171400785446166992187500000000e-01,
    6.073303137496106618442581748240627348423004150390625000000000e-01,
    6.147098441152082370919629283889662474393844604492187500000000e-01,
    6.220518194563762204296608615550212562084197998046875000000000e-01,
    6.293566200796095744252056647383142262697219848632812500000000e-01,
    6.366246205436488780904369377822149544954299926757812500000000e-01,
    6.438561897747246964840428518073167651891708374023437500000000e-01,
    6.510516911789285821043904434191063046455383300781250000000000e-01,
    6.582114827517947519552876656234730035066604614257812500000000e-01,
    6.653359171851762621230363947688601911067962646484375000000000e-01,
    6.724253419714956159225494047859683632850646972656250000000000e-01,
    6.794800995054460779343230569793377071619033813476562500000000e-01,
    6.865005271832184119418229784059803932905197143554687500000000e-01,
    6.934869574993252072658833640161901712417602539062500000000000e-01,
    7.004397181410921824351589748403057456016540527343750000000000e-01,
    7.073591320808827465071999540668912231922149658203125000000000e-01,
    7.142455176661226534662318954360671341419219970703125000000000e-01,
    7.210991887071851458301807724637910723686218261718750000000000e-01,
    7.279204545631992040455315873259678483009338378906250000000000e-01,
    7.347096202258381891780913974798750132322311401367187500000000e-01,
    7.414669864011469435638446157099679112434387207031250000000000e-01,
    7.481928495894603070581752035650424659252166748046875000000000e-01,
    7.548875021634685600346870160137768834829330444335937500000000e-01,
    7.615512324444793090805205793003551661968231201171875000000000e-01,
    7.681843247769263305357867466227617114782333374023437500000000e-01,
    7.747870596011734445340835009119473397731781005859375000000000e-01,
    7.813597135246596048219203112239483743906021118164062500000000e-01,
    7.879025593914316116794793742883484810590744018554687500000000e-01,
    7.944158663501059702838347220676951110363006591796875000000000e-01,
    8.008998999203047475248240516521036624908447265625000000000000e-01,
    8.073549220576040630348302329366561025381088256835937500000000e-01,
    8.137811912170370698405008624831680208444595336914062500000000e-01,
    8.201789624151877289293111061851959675550460815429687500000000e-01,
    8.265484872909150126929489488247781991958618164062500000000000e-01,
    8.328900141647416210943788428266998380422592163085937500000000e-01,
    8.392037880969439589406988488917704671621322631835937500000000e-01,
    8.454900509443752376625980105018243193626403808593750000000000e-01,
    8.517490414160575618041093548526987433433532714843750000000000e-01,
    8.579809951275720880659036993165500462055206298828125000000000e-01,
    8.641861446542802305259556305827572941780090332031250000000000e-01,
    8.703647195834045557916169855161570012569427490234375000000000e-01,
    8.765169465649996771716701005061622709035873413085937500000000e-01,
    8.826430493618412365108838457672391086816787719726562500000000e-01,
    8.887432488982590639281511357694398611783981323242187500000000e-01,
    8.948177633079434922791506323846988379955291748046875000000000e-01,
    9.008668079807485851162596190988551825284957885742187500000000e-01,
    9.068905956085184794090991999837569892406463623046875000000000e-01,
    9.128893362299616009991609644202981144189834594726562500000000e-01,
    9.188632372745945131597977706405799835920333862304687500000000e-01,
    9.248125036057809333911450266896281391382217407226562500000000e-01,
    9.307373375628862355313231091713532805442810058593750000000000e-01,
    9.366379390025705298228331230347976088523864746093750000000000e-01,
    9.425145053392398608593794051557779312133789062500000000000000e-01,
    9.483672315846776168513088123290799558162689208984375000000000e-01,
    9.541963103868752460456903463636990636587142944335937500000000e-01,
    9.600019320680809320478488189110066741704940795898437500000000e-01,
    9.657842846620869892149130464531481266021728515625000000000000e-01,
    9.715435539507719653329331777058541774749755859375000000000000e-01,
    9.772799234999164363912882436125073581933975219726562500000000e-01,
    9.829935746943101460004754699184559285640716552734375000000000e-01,
    9.886846867721658105310211794858332723379135131835937500000000e-01,
    9.943534368588579086534195994317997246980667114257812500000000e-01
};
    
template <>
bfloat16 Elementary<bfloat16>::MpfrCalculateFunction(bfloat16 x) {
    mpfr_set_d(mval, (float)x, MPFR_RNDN);
    mpfr_log2(mval, mval, MPFR_RNDN);
    return Elementary<bfloat16>::FromMPFR(mval);
}

template <>
bool Elementary<bfloat16>::ComputeSpecialCase(bfloat16 x, bfloat16& res) {
    if (x.val == 0x0 || x.val == 0x8000) {
        // If x == 0, then it should be -inf
        res.val = 0xFF80; return true;
    } else if (x.val == 0x7f80) {
        // If x == inf, then it should be infinity
        res = x; return true;
    } else if (x.val > 0x7F80) {
        // If x == NaN or negative, then it should be NaN
        res.val = 0xFFFF; return true;
    }
    
    return false;
}

template <>
double Elementary<bfloat16>::RangeReduction(bfloat16 x, double& modifier) {
    floatint fix, fit;
    
    int m = 0;
    fix.f = (float)x;
    if (x < 0x800000) {
        fix.f *= pow(2, 23);
        m -= 23;
    }
    m += fix.x >> 23;
    m -= 127;
    fix.x &= 0x007FFFFF;
    fix.x |= 0x3F800000;
    
    fit.x = fix.x & 0x007F0000;
    int FIndex = fit.x >> 16;
    fit.x |= 0x3F800000;
    double F = fit.f;
    
    double f = fix.f - F;
    double oneByF = 1.0 / (double)F;
    
    modifier = m + lut[FIndex];
    return f * oneByF;
}

template <class T>
double Elementary<T>::RangePropagation(double yp, double modifier) {
    return modifier + yp;
}

template <class T>
double Elementary<T>::ReverseRangePropagation(double y, double modifier) {
    return y - modifier;
}

template <class T>
bool Elementary<T>::FlipLbAndUb(double y) {
    return false;
}

int main(int argc, char** argv) {
    mpfr_init2(mval, 2000);
    
    PolySynth<bfloat16, Elementary<bfloat16>> bf16log2(SAMPLE, 50);
    bf16log2.SetUpSamplingOption(0.75, 1.5);
    bf16log2.CalcIntervals();
    
    do {
        printf("FINDING POLYNOMIALS\n");
        bf16log2.ResetPolynomials();
        bf16log2.FindPolynomials({1, 3, 5});
        printf("\tCOMPLETED\n\n");
    } while (bf16log2.TestAndAddSamplePoints());
    
    bf16log2.poly->PrintPiecewiseInfo();
    bf16log2.PerformErrorAnalysis();
    mpfr_clear(mval);
    return 0;
}
